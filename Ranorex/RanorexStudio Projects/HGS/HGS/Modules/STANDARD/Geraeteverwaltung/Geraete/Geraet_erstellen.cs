///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Cottbus_3000CR.Modules.STANDARD.Geraeteverwaltung.Geraete
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Geraet_erstellen recording.
    /// </summary>
    [TestModule("6544e13e-7429-4b6f-8052-ba5241e3f62a", ModuleType.Recording, 1)]
    public partial class Geraet_erstellen : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Cottbus_3000CR.HGS repository.
        /// </summary>
        public static global::Cottbus_3000CR.HGS repo = global::Cottbus_3000CR.HGS.Instance;

        static Geraet_erstellen instance = new Geraet_erstellen();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Geraet_erstellen()
        {
            AutomentenNrNeu = "1111111";
            AutomantenTyp = "Traveller ST";
            Projekt = "Üstra";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Geraet_erstellen Instance
        {
            get { return instance; }
        }

#region Variables

        string _AutomentenNrNeu;

        /// <summary>
        /// Gets or sets the value of variable AutomentenNrNeu.
        /// </summary>
        [TestVariable("62876abb-7e76-42d9-8496-07cf5b5b5a6b")]
        public string AutomentenNrNeu
        {
            get { return _AutomentenNrNeu; }
            set { _AutomentenNrNeu = value; }
        }

        string _AutomantenTyp;

        /// <summary>
        /// Gets or sets the value of variable AutomantenTyp.
        /// </summary>
        [TestVariable("fa3fe021-4a94-4eb0-9f4e-2b1f0ad6a5c8")]
        public string AutomantenTyp
        {
            get { return _AutomantenTyp; }
            set { _AutomantenTyp = value; }
        }

        string _Projekt;

        /// <summary>
        /// Gets or sets the value of variable Projekt.
        /// </summary>
        [TestVariable("8ea7cda0-8369-450b-b0c6-a8cfd57608c7")]
        public string Projekt
        {
            get { return _Projekt; }
            set { _Projekt = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            // Geräte Menü auswählen
            Report.Log(ReportLevel.Info, "Section", "Geräte Menü auswählen", new RecordItemIndex(0));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TicketingInside_DImasPlus.Menue.Geraete' at Center.", repo.TicketingInside_DImasPlus.Menue.GeraeteInfo, new RecordItemIndex(1));
            repo.TicketingInside_DImasPlus.Menue.Geraete.Click();
            Delay.Milliseconds(0);
            
            // Neues Gerät anlegen
            Report.Log(ReportLevel.Info, "Section", "Neues Gerät anlegen", new RecordItemIndex(2));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TicketingInside_DImasPlus.ContentPage.Geraeteverwaltung.Geraete.BtnNeuesGeraet' at Center.", repo.TicketingInside_DImasPlus.ContentPage.Geraeteverwaltung.Geraete.BtnNeuesGeraetInfo, new RecordItemIndex(3));
            repo.TicketingInside_DImasPlus.ContentPage.Geraeteverwaltung.Geraete.BtnNeuesGeraet.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 300ms.", new RecordItemIndex(4));
            Delay.Duration(300, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AutomentenNrNeu' with focus on 'TicketingInside_DImasPlus.PopUps.NeuesGeraet.Main.txtGeraetenummer'.", repo.TicketingInside_DImasPlus.PopUps.NeuesGeraet.Main.txtGeraetenummerInfo, new RecordItemIndex(5));
            repo.TicketingInside_DImasPlus.PopUps.NeuesGeraet.Main.txtGeraetenummer.PressKeys(AutomentenNrNeu);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'Virtueller testautomat ' with focus on 'TicketingInside_DImasPlus.PopUps.NeuesGeraet.Main.txtBeschreibung'.", repo.TicketingInside_DImasPlus.PopUps.NeuesGeraet.Main.txtBeschreibungInfo, new RecordItemIndex(6));
            repo.TicketingInside_DImasPlus.PopUps.NeuesGeraet.Main.txtBeschreibung.PressKeys("Virtueller testautomat ");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AutomentenNrNeu' with focus on 'TicketingInside_DImasPlus.PopUps.NeuesGeraet.Main.txtSeriennummer'.", repo.TicketingInside_DImasPlus.PopUps.NeuesGeraet.Main.txtSeriennummerInfo, new RecordItemIndex(7));
            repo.TicketingInside_DImasPlus.PopUps.NeuesGeraet.Main.txtSeriennummer.PressKeys(AutomentenNrNeu);
            Delay.Milliseconds(0);
            
            UserCodeCollections.DPlusLibrary.SetSingleSelectBox(repo.TicketingInside_DImasPlus.PopUps.NeuesGeraet.Main.selTypInfo, AutomantenTyp, repo.TicketingInside_DImasPlus.Listen.ListGeraeteTypInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TicketingInside_DImasPlus.PopUps.NeuesGeraet.Main.chkTestgeraet' at Center.", repo.TicketingInside_DImasPlus.PopUps.NeuesGeraet.Main.chkTestgeraetInfo, new RecordItemIndex(9));
            repo.TicketingInside_DImasPlus.PopUps.NeuesGeraet.Main.chkTestgeraet.Click();
            Delay.Milliseconds(0);
            
            UserCodeCollections.DPlusLibrary.SetSingleSelectBox(repo.TicketingInside_DImasPlus.PopUps.NeuesGeraet.Main.selProjektInfo, Projekt, repo.TicketingInside_DImasPlus.Listen.ListProjektInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TicketingInside_DImasPlus.PopUps.NeuesGeraet.Main.btnUebernehmen' at 67;23.", repo.TicketingInside_DImasPlus.PopUps.NeuesGeraet.Main.btnUebernehmenInfo, new RecordItemIndex(11));
            repo.TicketingInside_DImasPlus.PopUps.NeuesGeraet.Main.btnUebernehmen.Click("67;23");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
