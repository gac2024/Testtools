///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;
using System.Xml;


namespace Cottbus_3000CR.Modules.STANDARD.Automatensequenzen
{
    public partial class AutomatenSequencen_pruefen
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }


       
        

        public void ValidateAllSequences()
        {
                     
            string ProjectName=TestSuite.Current.Parameters["ProjectName"]; 
            string HGSmeldungsPfad = TestSuite.Current.Parameters["HGSmeldungsPfad"];       
            string xmlFilePath = HGSmeldungsPfad+"\\TRANSFER\\transfer_"+ProjectName+".xml";

               
            
            Report.Info("path: " + xmlFilePath);


			try
	        {
	        	 // Laden der XML-Datei
	        	XmlDocument xmlDoc = new XmlDocument();
	            xmlDoc.Load(xmlFilePath);
	            
	            int anzahlsequenzen=1;
				int ersteSequenz=0;
				int letzteSequenz=0;
	            
		        string AutomantenNr = xmlDoc.SelectSingleNode("//automatenNr").InnerText;
				int.TryParse(xmlDoc.SelectSingleNode("//anzahlsequenzen").InnerText, out anzahlsequenzen);
				int.TryParse(xmlDoc.SelectSingleNode("//ersteSequenz").InnerText, out ersteSequenz);
				int.TryParse(xmlDoc.SelectSingleNode("//letzteSequenz").InnerText, out letzteSequenz);
			
			
				
				// define Objects
				
	        	// get Tablerepo
	           	var TabelleInfo=repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Automatensequenzen.AutomatensequenzenTabelle.SelfInfo;
	           	TableTag tabelle= TabelleInfo.FindAdapter<TableTag>();
	           	
			    InputTag filterAutomatenNr=TabelleInfo.FindAdapter<TableTag>().FindSingle(".//input[@id='number-filter-from-deviceResource.device.deviceId']");
			    InputTag filterSequenzNr=TabelleInfo.FindAdapter<TableTag>().FindSingle(".//input[@id='number-filter-from-sequenceNumber']");
	
			    filterAutomatenNr.DoubleClick();
			    filterAutomatenNr.PressKeys("{Delete}");
			    filterAutomatenNr.PressKeys(AutomantenNr);
			    Delay.Duration(300, false);
			    
			    int index=1;
			    for (int sequence=ersteSequenz;sequence<=letzteSequenz;sequence++,index++){
			    	
				    filterSequenzNr.DoubleClick();
				    filterSequenzNr.PressKeys("{Delete}");
				    filterSequenzNr.PressKeys(""+sequence);
				    Delay.Duration(500, false);			    	
			    	
			    	
			    	
		    	     Report.Log(ReportLevel.Info, "Validation","define objects");
		    
			     	 Element ELDeviceId= tabelle.FindSingle(".//tr[1]/td[@data-test-id='mat-table-cell-deviceResource.device.deviceId']/p",5000);
					 Element ELSequenceNumber= tabelle.FindSingle(".//tr[1]/td[@data-test-id='mat-table-cell-sequenceNumber']/p");
					 Element ELDescription= tabelle.FindSingle(".//tr[1]/td[@data-test-id='mat-table-cell-description']/p");
					 Element ELProcessCategory= tabelle.FindSingle(".//tr[1]/td[@data-test-id='mat-table-cell-processCategory']/p");
						
				    
				    
					 Report.Log(ReportLevel.Info, "Validation","define values for sequence "+ sequence +" , index="+index );			
					 
				     string beschreibung = xmlDoc.SelectSingleNode("//vorgaenge["+index+"]/beschreibung").InnerText;
				      Report.Log(ReportLevel.Info, "Validation",beschreibung);
				     string kategorie = xmlDoc.SelectSingleNode("//vorgaenge["+index+"]/kategorie").InnerText;			     
				   Report.Log(ReportLevel.Info, "Validation",kategorie);
					
					 
					 // validation
					 Report.Log(ReportLevel.Info, "Validation","start check");
					 Validate.AttributeEqual(ELDeviceId,"InnerText",AutomantenNr);
					 Validate.AttributeEqual(ELSequenceNumber,"InnerText",""+sequence);
					 Validate.AttributeEqual(ELDescription,"InnerText",beschreibung);
					 Validate.AttributeEqual(ELProcessCategory,"InnerText",kategorie);

			    }
	


	        }catch(Exception ex){	     
	            Report.Error("Fehler beim Verarbeiten der XML-Datei: " + ex.Message);
	        }
			
        }
        
        
        
        
        

    }
}
