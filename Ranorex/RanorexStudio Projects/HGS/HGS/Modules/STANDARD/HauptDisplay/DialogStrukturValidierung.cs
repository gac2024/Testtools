///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Cottbus_3000CR.Modules.STANDARD.HauptDisplay
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The DialogStrukturValidierung recording.
    /// </summary>
    [TestModule("082cbe7a-4483-4641-b0be-741815340527", ModuleType.Recording, 1)]
    public partial class DialogStrukturValidierung : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Cottbus_3000CR.HGS repository.
        /// </summary>
        public static global::Cottbus_3000CR.HGS repo = global::Cottbus_3000CR.HGS.Instance;

        static DialogStrukturValidierung instance = new DialogStrukturValidierung();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public DialogStrukturValidierung()
        {
            MainMenueName = "";
            DLGTitel = "";
            DLGTabAnzahl = "";
            DLGButtonName = "";
            DLGTableTyp = "";
            DLGTableButtons = "";
            DLGTabNames = "";
            SubMenueName = "";
            DLGZeitraumauswahl = "";
            DLGTableColAuswahl = "";
            TabulatorName = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static DialogStrukturValidierung Instance
        {
            get { return instance; }
        }

#region Variables

        string _MainMenueName;

        /// <summary>
        /// Gets or sets the value of variable MainMenueName.
        /// </summary>
        [TestVariable("44b3c6c5-2c59-4e30-9590-313f869171b4")]
        public string MainMenueName
        {
            get { return _MainMenueName; }
            set { _MainMenueName = value; }
        }

        string _DLGTitel;

        /// <summary>
        /// Gets or sets the value of variable DLGTitel.
        /// </summary>
        [TestVariable("f26eddd8-06e8-4bf0-8335-9825df11d170")]
        public string DLGTitel
        {
            get { return _DLGTitel; }
            set { _DLGTitel = value; }
        }

        string _DLGTabAnzahl;

        /// <summary>
        /// Gets or sets the value of variable DLGTabAnzahl.
        /// </summary>
        [TestVariable("1a78da4e-45f7-4444-adeb-b0ae6f6a3312")]
        public string DLGTabAnzahl
        {
            get { return _DLGTabAnzahl; }
            set { _DLGTabAnzahl = value; }
        }

        string _DLGButtonName;

        /// <summary>
        /// Gets or sets the value of variable DLGButtonName.
        /// </summary>
        [TestVariable("ceff555d-cb99-4ca3-a80c-34f8c0f02ef4")]
        public string DLGButtonName
        {
            get { return _DLGButtonName; }
            set { _DLGButtonName = value; }
        }

        string _DLGTableTyp;

        /// <summary>
        /// Gets or sets the value of variable DLGTableTyp.
        /// </summary>
        [TestVariable("dffd5f29-8447-4f70-b009-d4fc8bad9381")]
        public string DLGTableTyp
        {
            get { return _DLGTableTyp; }
            set { _DLGTableTyp = value; }
        }

        string _DLGTableButtons;

        /// <summary>
        /// Gets or sets the value of variable DLGTableButtons.
        /// </summary>
        [TestVariable("c7f313a3-7332-47e3-87f4-7969ba4f3ff5")]
        public string DLGTableButtons
        {
            get { return _DLGTableButtons; }
            set { _DLGTableButtons = value; }
        }

        string _DLGTabNames;

        /// <summary>
        /// Gets or sets the value of variable DLGTabNames.
        /// </summary>
        [TestVariable("d0f95dd7-7085-4e94-aa70-fec2ff9632c6")]
        public string DLGTabNames
        {
            get { return _DLGTabNames; }
            set { _DLGTabNames = value; }
        }

        string _SubMenueName;

        /// <summary>
        /// Gets or sets the value of variable SubMenueName.
        /// </summary>
        [TestVariable("5770d5a9-ba73-49ce-bd3f-3b7c2ee808c1")]
        public string SubMenueName
        {
            get { return _SubMenueName; }
            set { _SubMenueName = value; }
        }

        string _DLGZeitraumauswahl;

        /// <summary>
        /// Gets or sets the value of variable DLGZeitraumauswahl.
        /// </summary>
        [TestVariable("c9c9e66f-de61-49d7-bb1c-44d652339b56")]
        public string DLGZeitraumauswahl
        {
            get { return _DLGZeitraumauswahl; }
            set { _DLGZeitraumauswahl = value; }
        }

        string _DLGTableColAuswahl;

        /// <summary>
        /// Gets or sets the value of variable DLGTableColAuswahl.
        /// </summary>
        [TestVariable("833c55a1-9eb2-4508-9c85-fbd66a53de31")]
        public string DLGTableColAuswahl
        {
            get { return _DLGTableColAuswahl; }
            set { _DLGTableColAuswahl = value; }
        }

        string _TabulatorName;

        /// <summary>
        /// Gets or sets the value of variable TabulatorName.
        /// </summary>
        [TestVariable("8fa81508-70b2-497e-9ee1-bc99a355c439")]
        public string TabulatorName
        {
            get { return _TabulatorName; }
            set { _TabulatorName = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            // MenueItem auswählen
            Report.Log(ReportLevel.Info, "Section", "MenueItem auswählen", new RecordItemIndex(0));
            
            try {
                clickOnMenueItem(repo.TicketingInside_DImasPlus.Menue.SelfInfo, MainMenueName, SubMenueName);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(1)); }
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 800ms.", new RecordItemIndex(2));
            Delay.Duration(800, false);
            
            clickOnTab(TabulatorName);
            Delay.Milliseconds(0);
            
            // Struktur prüfung
            Report.Log(ReportLevel.Info, "Section", "Struktur prüfung", new RecordItemIndex(4));
            
            try {
                checkTitel(DLGTitel);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(5)); }
            
            try {
                checkTabulatoren(DLGTabAnzahl, DLGTabNames);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(6)); }
            
            try {
                checkButton(DLGButtonName);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(7)); }
            
            try {
                checkTableStruktur(DLGTableTyp, DLGTableButtons, DLGTableColAuswahl);
                Delay.Milliseconds(0);
            } catch(Exception ex) { Report.Log(ReportLevel.Warn, "Module", "(Optional Action) " + ex.Message, new RecordItemIndex(8)); }
            
            checkZeitrtaum(DLGZeitraumauswahl);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
