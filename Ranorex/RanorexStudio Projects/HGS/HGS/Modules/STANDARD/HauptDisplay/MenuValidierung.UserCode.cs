///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace Cottbus_3000CR.Modules.STANDARD.HauptDisplay
{
    public partial class MenuValidierung
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void validateMenueItem(string MenueItemName, string MenueLevel, RepoItemInfo Menue)
        {
             
			string LEVEL1="LEVEL1";        	
			string LEVEL2="LEVEL2";
			bool foundItem=false;

			
        	
        	


        	if (MenueLevel.Trim().ToUpper().Equals(LEVEL1) ) {
        		var Alist=Menue.FindAdapter<UlTag>().FindChildren<ATag>();
        		for (int i=0; i<Alist.Count;i++){
//        			Alist[i].EnsureVisible();
        			Element menueElement =null;  			
        			if ( Alist[i].TryFindSingle(".//p[@innerText='"+MenueItemName+"']", out menueElement )){
            		   	foundItem=true;
            		   	break;
            		   }
        		}
        	}else if (MenueLevel.Trim().ToUpper().Equals(LEVEL2) ) {
        		var DIVlist=Menue.FindAdapter<UlTag>().FindChildren<DivTag>();
          		for (int i=0; i<DIVlist.Count;i++){
//        			DIVlist[i].EnsureVisible();
        			Element menueElement =null;  			
        			if ( DIVlist[i].TryFindSingle(".//p[@innerText='"+MenueItemName+"']", out menueElement )){
            		   	foundItem=true;
            		   	break;
            		   }
        		}      		

			}else{
				
				Validate.Fail(MenueLevel+ " existiert nicht.");
			}
        	
        	
        	
        	
	
        	if (foundItem){
        		Validate.IsTrue(true,"Item: "+MenueItemName+" on Level "+MenueLevel);
        	}else{
        		Validate.IsFalse(true,"Item: "+MenueItemName+" on Level "+MenueLevel);
        	}

        }

    }
}
