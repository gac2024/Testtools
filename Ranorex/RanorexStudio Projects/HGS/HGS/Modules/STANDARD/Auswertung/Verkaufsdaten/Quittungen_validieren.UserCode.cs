///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Xml;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;
using Cottbus_3000CR.UserCodeCollections;

namespace Cottbus_3000CR.Modules.STANDARD.Auswertung.Verkaufsdaten
{
    public partial class Quittungen_validieren
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Validate_Quittungentable(RepoItemInfo ersteZeile)
        {
  
 		 //get some Data from PRoduct
            string ProjectName=TestSuite.Current.Parameters["ProjectName"]; 
            string HGSmeldungsPfad = TestSuite.Current.Parameters["HGSmeldungsPfad"];       
            string xmlFilePath = HGSmeldungsPfad+"\\TRANSFER\\transfer_"+ProjectName+".xml";

	        try
	        {
	        	 // Laden der XML-Datei
				 XmlDocument xmlDoc = new XmlDocument();	           
	        	 xmlDoc.Load(xmlFilePath);

  	 
	        	 // get anzahltransaktionen
	        	XmlNode validNode = xmlDoc.SelectSingleNode("//anzahlquittungen");
				if (validNode == null)
					return;
		        				
				string AutomantenNr=xmlDoc.SelectSingleNode("//automatenNr").InnerText;
				string Abrechnungsnummer=xmlDoc.SelectSingleNode("//abrechnungsnr").InnerText;
								
				int anzahltransaktionen=0;
				
				int.TryParse(validNode.InnerText, out anzahltransaktionen);
		        
				for (int i=1;i<=anzahltransaktionen;i++){
					Report.Log(ReportLevel.Info, "Validation","Starte Validierung");
					// hole Daten
					Report.Log(ReportLevel.Info, "Validation","----------------- Quittungen Nr "+i+" ----------");
					
					string transaktionsnummer=xmlDoc.SelectSingleNode("//quittungen["+i+"]/transaktionsnummer").InnerText;
					string transaktionsnummerGiroCard=xmlDoc.SelectSingleNode("//quittungen["+i+"]/transaktionsnummerGiroCard").InnerText;
				    string transaktionsnummerKreditkarte=xmlDoc.SelectSingleNode("//quittungen["+i+"]/transaktionsnummerKreditkarte").InnerText;
				
				    
				    // welches sit die Transwaktionsnummer und welcher zahlungstyp
				    string zahlungsmethode="Bar";
				    				    
				    if (!transaktionsnummerGiroCard.Equals("0")) zahlungsmethode="GiroCard";
				    if (!transaktionsnummerKreditkarte.Equals("0")) zahlungsmethode="Kreditkarte";

				    // Filter  Transaktionsnummer
				    
				    var FilterTransaktionsNrInfo=repo.TicketingInside_DImasPlus.ContentPage.Auswertung.Verkaufsdaten.Quittungen.Tabelle.Filter.FilterTransaktionsNrInfo;
				    	
				    DPlusLibrary.Fill_textfilter(FilterTransaktionsNrInfo, transaktionsnummer);

					string preisTotal= DPlusLibrary.PreisConverter(xmlDoc.SelectSingleNode("//quittungen["+i+"]/preisTotal").InnerText);
					string einzahlungsbetrag= DPlusLibrary.PreisConverter(xmlDoc.SelectSingleNode("//quittungen["+i+"]/einzahlungsbetrag").InnerText);			     
					string rueckerstattungsbetragSoll= DPlusLibrary.PreisConverter(xmlDoc.SelectSingleNode("//quittungen["+i+"]/rueckerstattungsbetragSoll").InnerText);
					string rueckerstattungsbetragIst= DPlusLibrary.PreisConverter(xmlDoc.SelectSingleNode("//quittungen["+i+"]/rueckerstattungsbetragIst").InnerText);
					string stoerbetrag= DPlusLibrary.PreisConverter(xmlDoc.SelectSingleNode("//quittungen["+i+"]/stoerbetrag").InnerText);
						     
				     // get repoIndfo objekte	
					var deviceNumber=repo.TicketingInside_DImasPlus.ContentPage.Auswertung.Verkaufsdaten.Quittungen.Tabelle.Zeile1.cellGeraeteNrInfo;
					var settlementNumber=repo.TicketingInside_DImasPlus.ContentPage.Auswertung.Verkaufsdaten.Quittungen.Tabelle.Zeile1.cellAbrechnungsNrInfo;
					var transactionNumber=repo.TicketingInside_DImasPlus.ContentPage.Auswertung.Verkaufsdaten.Quittungen.Tabelle.Zeile1.cellTransaktionsNrInfo;
					var paymentmethod=repo.TicketingInside_DImasPlus.ContentPage.Auswertung.Verkaufsdaten.Quittungen.Tabelle.Zeile1.cellZahlungsArtInfo;
					var price=repo.TicketingInside_DImasPlus.ContentPage.Auswertung.Verkaufsdaten.Quittungen.Tabelle.Zeile1.cellGesamtbetragInfo;
					var paymentAmount=repo.TicketingInside_DImasPlus.ContentPage.Auswertung.Verkaufsdaten.Quittungen.Tabelle.Zeile1.cellEinzahlungsbetragInfo;
					var refundAmount=repo.TicketingInside_DImasPlus.ContentPage.Auswertung.Verkaufsdaten.Quittungen.Tabelle.Zeile1.cellSollRueckerstattungInfo;
					var refundTotal=repo.TicketingInside_DImasPlus.ContentPage.Auswertung.Verkaufsdaten.Quittungen.Tabelle.Zeile1.cellIstRueckerstattungInfo;
					var retainedAmount=repo.TicketingInside_DImasPlus.ContentPage.Auswertung.Verkaufsdaten.Quittungen.Tabelle.Zeile1.cellStoerbetragInfo;

				    // validiere
				     Validate.AttributeEqual(deviceNumber, "InnerText", AutomantenNr);
				     Validate.AttributeEqual(settlementNumber, "InnerText", Abrechnungsnummer);
				     Validate.AttributeEqual(transactionNumber, "InnerText", transaktionsnummer);
				     Validate.AttributeEqual(paymentmethod,"InnerText",zahlungsmethode);
				     Validate.AttributeContains(price, "InnerText", preisTotal);
				     Validate.AttributeContains(paymentAmount, "InnerText", einzahlungsbetrag);
				     Validate.AttributeContains(refundAmount, "InnerText", rueckerstattungsbetragSoll);
				     Validate.AttributeContains(refundTotal, "InnerText", rueckerstattungsbetragIst);			
					 Validate.AttributeContains(retainedAmount, "InnerText", stoerbetrag);		
	 
					 /* ****************************
					  * 
					  * Subtable
					  * 
					  * ****************************/
					 
					  // oeffne
					  
					  deviceNumber.FindAdapter<PTag>().Click();					  
					  var TableRow1 = repo.TicketingInside_DImasPlus.ContentPage.Auswertung.Verkaufsdaten.Quittungen.Tabelle.Zeile1.SelfInfo;					  
					  Element detailsTable = null;			
					  Element tbody=TableRow1.FindAdapter<TrTag>().Parent;				  
					  detailsTable= tbody.FindSingle(".//table");
					 
				     int anzahlverkaeufe=0;				
				     int.TryParse(xmlDoc.SelectSingleNode("//quittungen["+i+"]/anzahltransaktionen").InnerText, out anzahlverkaeufe);
				     
				     int transaktionsnummerQ=0;
				     int.TryParse(transaktionsnummer,out transaktionsnummerQ);
				          				     
				     int j=1;
				     int k=1;
				     while (j<=anzahlverkaeufe){
					     
						int transaktionsnummerVK=0;  
				     	int.TryParse(xmlDoc.SelectSingleNode("//verkaeufe["+k+"]/transaktionsnummer").InnerText, out transaktionsnummerVK);
				     	
				     	if (transaktionsnummerVK == transaktionsnummerQ){
				     		Report.Log(ReportLevel.Info, "Validation","----------------- Details Zeile "+j+" ----------");
					     	 Element ElProductName= tbody.FindSingle(".//table/tbody/tr["+j+"]/td[@data-test-id='mat-table-cell-productName']/p");
							 Element ElProductNumber= tbody.FindSingle(".//table/tbody/tr["+j+"]/td[@data-test-id='mat-table-cell-productNumber']/p");
							 Element ElProductDescription= tbody.FindSingle(".//table/tbody/tr["+j+"]/td[@data-test-id='mat-table-cell-productDescription']");
							 Element ElFareCategoryDescription= tbody.FindSingle(".//table/tbody/tr["+j+"]/td[@data-test-id='mat-table-cell-fareCategoryDescription']/p");
							 Element ElPrice= tbody.FindSingle(".//table/tbody/tr["+j+"]/td[@data-test-id='mat-table-cell-price']/p");
							 					 
						     string productName= xmlDoc.SelectSingleNode("//verkaeufe["+k+"]/produktkennung").InnerText;
						     string productNumber= xmlDoc.SelectSingleNode("//verkaeufe["+k+"]/artikelnummer").InnerText;			     
						     string productDescription=xmlDoc.SelectSingleNode("//verkaeufe["+k+"]/produktbezeichnung").InnerText;
							 string fareCategoryDescription= xmlDoc.SelectSingleNode("//verkaeufe["+k+"]/preisstufenText").InnerText;
						     string productprice= DPlusLibrary.PreisConverter(xmlDoc.SelectSingleNode("//verkaeufe["+k+"]/preis").InnerText);					 
							 
							 // validation
							 Validate.AttributeEqual(ElProductName,"InnerText",productName);
							 Validate.AttributeEqual(ElProductNumber,"InnerText",productNumber);
							 Validate.AttributeEqual(ElProductDescription,"InnerText",productDescription);
							 Validate.AttributeEqual(ElFareCategoryDescription,"InnerText",fareCategoryDescription);
							 Validate.AttributeContains(ElPrice,"InnerText",productprice);
				
						 j++;
				     	}
				     	k++;
				     }
					  
				}

            }catch(Exception ex){	     
	            Report.Warn("Fehler beim Verarbeiten der XML-Datei: " + ex.Message);
	        }
                                
        }
        
        
        

    }
}
