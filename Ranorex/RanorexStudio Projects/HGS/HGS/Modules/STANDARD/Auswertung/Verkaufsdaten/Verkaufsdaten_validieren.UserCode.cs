///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Xml;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;
using Cottbus_3000CR.UserCodeCollections;




namespace Cottbus_3000CR.Modules.STANDARD.Auswertung.Verkaufsdaten
{
    public partial class Verkaufsdaten_validieren
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

         
        
        public void Validate_Verkaufsdatentable(RepoItemInfo ersteZeile)
        {
 	        
            string ProjectName=TestSuite.Current.Parameters["ProjectName"]; 
            string HGSmeldungsPfad = TestSuite.Current.Parameters["HGSmeldungsPfad"];       
            string xmlFilePath = HGSmeldungsPfad+"\\TRANSFER\\transfer_"+ProjectName+".xml";

        	try
	        {
	        	 // Laden der XML-Datei
				 XmlDocument xmlDoc = new XmlDocument();	           
	        	 xmlDoc.Load(xmlFilePath);

	        	 
	        	 
	        	 // get anzahltransaktionen
	        	XmlNode validNode = xmlDoc.SelectSingleNode("//anzahlquittungen");
				if (validNode == null)
					return;
		        
				
				string AutomantenNr=xmlDoc.SelectSingleNode("//automatenNr").InnerText;
				string Abrechnungsnummer=xmlDoc.SelectSingleNode("//abrechnungsnr").InnerText;
				
				
				int anzahltransaktionen=0;
				
				int.TryParse(validNode.InnerText, out anzahltransaktionen);
		        
				for (int i=1;i<=anzahltransaktionen;i++){
					Report.Log(ReportLevel.Info, "Validation","Starte Validierung");
						
					string transaktionsnummer=xmlDoc.SelectSingleNode("//quittungen["+i+"]/transaktionsnummer").InnerText;
				
				    
				    // Filter  Transaktionsnummer
				    
				    
				    var filterTransNrInfo = repo.TicketingInside_DImasPlus.ContentPage.Auswertung.Verkaufsdaten.FilteVerkaufsdaten.FilterTransaktionsNrInfo;
				    	
				    DPlusLibrary.Fill_textfilter(filterTransNrInfo, transaktionsnummer);      

				    Delay.Duration(500, false);
					  // oeffne
		  
					var tbody=ersteZeile.FindAdapter<TrTag>().Parent;
					  
					 
				
				     int anzahlverkaeufe=0;				
				     int.TryParse(xmlDoc.SelectSingleNode("//quittungen["+i+"]/anzahltransaktionen").InnerText, out anzahlverkaeufe);
				     
				     int transaktionsnummerQ=0;
				     int.TryParse(transaktionsnummer,out transaktionsnummerQ);
				     
				    
				    	
				     int j=1;
				     int k=1;
				     while (j<=anzahlverkaeufe){
					     
						int transaktionsnummerVK=0;  
				     	int.TryParse(xmlDoc.SelectSingleNode("//verkaeufe["+k+"]/transaktionsnummer").InnerText, out transaktionsnummerVK);
				     	
				     	if (transaktionsnummerVK == transaktionsnummerQ){
				     		Report.Log(ReportLevel.Info, "Validation","----------------- Details zu  "+transaktionsnummerVK + " - "+j+" ----------");
				     		
				     		
				     		Report.Log(ReportLevel.Info, "Validation","define objects");
					     	 Element ElProductName= tbody.FindSingle(".//tr["+j+"]/td[@data-test-id='mat-table-cell-productName']/p");
							 Element ElProductNumber= tbody.FindSingle(".//tr["+j+"]/td[@data-test-id='mat-table-cell-productNumber']/p");
							 Element ElProductDescription= tbody.FindSingle(".//tr["+j+"]/td[@data-test-id='mat-table-cell-productDescription']/p");
							 Element ElFareCategoryDescription= tbody.FindSingle(".//tr["+j+"]/td[@data-test-id='mat-table-cell-fareCategoryDescription']/p");
							 Element ElPrice= tbody.FindSingle(".//tr["+j+"]/td[@data-test-id='mat-table-cell-price']/p");
							
							Report.Log(ReportLevel.Info, "Validation","define values");							 
						     string productName= xmlDoc.SelectSingleNode("//verkaeufe["+k+"]/produktkennung").InnerText;
						     string productNumber= xmlDoc.SelectSingleNode("//verkaeufe["+k+"]/artikelnummer").InnerText;			     
						     string productDescription=xmlDoc.SelectSingleNode("//verkaeufe["+k+"]/produktbezeichnung").InnerText;
							 string fareCategoryDescription= xmlDoc.SelectSingleNode("//verkaeufe["+k+"]/preisstufenText").InnerText;
						     string productprice= DPlusLibrary.PreisConverter(xmlDoc.SelectSingleNode("//verkaeufe["+k+"]/preis").InnerText);					 
							 
						     
						     Report.Log(ReportLevel.Info, "Validation"," productName " + productName);
						     Report.Log(ReportLevel.Info, "Validation"," productNumber" +productNumber);
						     
						     Report.Log(ReportLevel.Info, "Validation"," ElProductName" +ElProductName.GetAttributeValue("InnerText"));
						     
						     
							 // validation
							 Report.Log(ReportLevel.Info, "Validation","start check");
							 Validate.AttributeEqual(ElProductName,"InnerText",productName);
							 Validate.AttributeEqual(ElProductNumber,"InnerText",productNumber);
							 Validate.AttributeEqual(ElProductDescription,"InnerText",productDescription);
							 Validate.AttributeEqual(ElFareCategoryDescription,"InnerText",fareCategoryDescription);
							 Validate.AttributeContains(ElPrice,"InnerText",productprice);
				
						 j++;
				     	}
				     	k++;
				     }
					  
				}

            }catch(Exception ex){	     
	            Report.Warn("Fehler beim Verarbeiten der XML-Datei: " + ex.Message);
	        }
            
            
            
        }
        
        
    
       
        
        
        
        
        
  

    }
}
