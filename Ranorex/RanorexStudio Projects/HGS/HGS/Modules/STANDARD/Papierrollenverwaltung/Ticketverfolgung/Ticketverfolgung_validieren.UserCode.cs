///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Diagnostics;
using System.Xml;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;
using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;
using Cottbus_3000CR.UserCodeCollections;

namespace Cottbus_3000CR.Modules.STANDARD.Papierrollenverwaltung.Ticketverfolgung
{
    public partial class Ticketverfolgung_validieren
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void ticketverfolgungpruefen()
        {
           
        	string ProjectName=TestSuite.Current.Parameters["ProjectName"];
            string HGSmeldungsPfad = TestSuite.Current.Parameters["HGSmeldungsPfad"];       
            string xmlFilePath = HGSmeldungsPfad+"\\TRANSFER\\transfer_"+ProjectName+".xml";

               
            
            Report.Info("path: " + xmlFilePath);


			try
	        {
	        	 // Laden der XML-Datei
	        	XmlDocument xmlDoc = new XmlDocument();
	            xmlDoc.Load(xmlFilePath);
	            XmlNodeList nodeList;
        	
        	// ####################################################
        	// ###   Hier geht es los  
        	// ####################################################
        	
        	string automatenNr = xmlDoc.SelectSingleNode("//automatenNr").InnerText;
        	string abrechnungsNr = xmlDoc.SelectSingleNode("//auftragsNr").InnerText;
        	
        	// hole die Produktinfos raus
        	
        	nodeList = xmlDoc.SelectNodes("//produktausgaben");
        	
        	foreach (XmlNode product in nodeList)
        	{
				
        		// produkt
        		string abschnittsnummerPapier = product.SelectSingleNode("./abschnittsnummerPapier").InnerText;
				string medienkennung = product.SelectSingleNode("./medienkennung").InnerText;
				string seriennummerPapier = product.SelectSingleNode("./seriennummerPapier").InnerText;
				string ticketNummer = product.SelectSingleNode("./ticketNummer").InnerText;
				string transaktionsnummer = product.SelectSingleNode("./transaktionsnummer").InnerText;
        	
        		//   ###################   Verkauf   
        		XmlNode verkauf =xmlDoc.SelectSingleNode("//verkaeufe[ticketNummer='"+ticketNummer+"']");
			                                      	
				string preis = DPlusLibrary.PreisConverter (verkauf.SelectSingleNode("./preis").InnerText );
			    string produktkennung = verkauf.SelectSingleNode("./produktkennung").InnerText;
				string artikelnummer = verkauf.SelectSingleNode("./artikelnummer").InnerText;
				string preisstufenText = verkauf.SelectSingleNode("./preisstufenText").InnerText;
				string pfand = verkauf.SelectSingleNode("./pfand").InnerText;
				
				
				//   ###################   Quittungen
				XmlNode quiottung =xmlDoc.SelectSingleNode("//quittungen[transaktionsnummer='"+transaktionsnummer+"']");
				
				string zahlungsart = quiottung.SelectSingleNode("./zahlungsart").InnerText;  //0   bar   //2 giro
				string einzahlungsbetrag = DPlusLibrary.PreisConverter ( quiottung.SelectSingleNode("./einzahlungsbetrag").InnerText );
				string rueckerstattungsbetragIst = DPlusLibrary.PreisConverter ( quiottung.SelectSingleNode("./rueckerstattungsbetragIst").InnerText );
				string stoerbetrag = DPlusLibrary.PreisConverter ( quiottung.SelectSingleNode("./stoerbetrag").InnerText );
				
				
				zahlungsart = getZahlungsartString(zahlungsart);
				
				
				
				
				Report.Info("medienkennung: " + medienkennung);
			    Report.Info("ticketNummer: " + ticketNummer);
				Report.Info("transaktionsnummer: " + transaktionsnummer);
				
				
	        	var FilterGeraetenummerInfo=repo.TicketingInside_DImasPlus.ContentPage.Papierrollenverwaltung.Ticketverfolgung.Tabelle.Filter.FilterGeraetenummerInfo;
	        	var FilteErsterBarcodeInfo=repo.TicketingInside_DImasPlus.ContentPage.Papierrollenverwaltung.Ticketverfolgung.Tabelle.Filter.FilteErsterBarcodeInfo;
	        	
	        	
	        	// ##############   Filtern  ###########
	        	
	        	
	        	DPlusLibrary.Fill_textfilter(FilterGeraetenummerInfo, automatenNr);
	        	DPlusLibrary.Fill_textfilter(FilteErsterBarcodeInfo, medienkennung);        	
	        	Delay.Milliseconds(300);
	        	
	        	// zeile1 objekte   
	        	
	        	var CellProduktnameInfo=repo.TicketingInside_DImasPlus.ContentPage.Papierrollenverwaltung.Ticketverfolgung.Tabelle.Zeile1.CellProduktnameInfo;
	        	var CellTicketnummerInfo=repo.TicketingInside_DImasPlus.ContentPage.Papierrollenverwaltung.Ticketverfolgung.Tabelle.Zeile1.CellTicketnummerInfo;
	        	var CellGeraetenummerInfo=repo.TicketingInside_DImasPlus.ContentPage.Papierrollenverwaltung.Ticketverfolgung.Tabelle.Zeile1.CellGeraetenummerInfo;
	    		var CellErsterBarcodeInfo=repo.TicketingInside_DImasPlus.ContentPage.Papierrollenverwaltung.Ticketverfolgung.Tabelle.Zeile1.CellErsterBarcodeInfo;
	    		var CellLetzterBarcodeInfo=repo.TicketingInside_DImasPlus.ContentPage.Papierrollenverwaltung.Ticketverfolgung.Tabelle.Zeile1.CellLetzterBarcodeInfo;
	    		var CellPreisInfo=repo.TicketingInside_DImasPlus.ContentPage.Papierrollenverwaltung.Ticketverfolgung.Tabelle.Zeile1.CellPreisInfo;	        	
	        	
	    		// Tabelle Zeile 1 Validieren
	    		
				 Report.Log(ReportLevel.Info, "Validation","start check");
				 Validate.AttributeEqual(CellProduktnameInfo,"InnerText",produktkennung);
				 Validate.AttributeEqual(CellTicketnummerInfo,"InnerText",ticketNummer);
				 Validate.AttributeEqual(CellGeraetenummerInfo,"InnerText",automatenNr);
				 Validate.AttributeEqual(CellErsterBarcodeInfo,"InnerText",medienkennung);
	 			 Validate.AttributeEqual(CellLetzterBarcodeInfo,"InnerText",medienkennung);
		 		 Validate.AttributeContains(CellPreisInfo,"InnerText",preis);
		        
		 		 
		 		 // Details
		  		  
		 		 CellProduktnameInfo.FindAdapter<PTag>().Click();
		 		 
		 		 // HEadser objekte 
		 		 var labelAbrechnungsnummerInfo=repo.TicketingInside_DImasPlus.ContentPage.Papierrollenverwaltung.Ticketverfolgung.TicketverfolgungDetails.Details.labelAbrechnungsnummerInfo;
		 		 var labelBarcodeInfo=repo.TicketingInside_DImasPlus.ContentPage.Papierrollenverwaltung.Ticketverfolgung.TicketverfolgungDetails.Details.labelBarcodeInfo;
		 		 var labelGeraetenummerInfo=repo.TicketingInside_DImasPlus.ContentPage.Papierrollenverwaltung.Ticketverfolgung.TicketverfolgungDetails.Details.labelGeraetenummerInfo;
		 		 var labelTransaktionsnummerInfo=repo.TicketingInside_DImasPlus.ContentPage.Papierrollenverwaltung.Ticketverfolgung.TicketverfolgungDetails.Details.labelTransaktionsnummerInfo;
		 		 
		 		 var elGeraet =  labelGeraetenummerInfo.FindAdapter<H6Tag>().Parent.Parent.FindSingle("./div[2]");
		 		 var elBarcode =  labelBarcodeInfo.FindAdapter<H6Tag>().Parent.Parent.FindSingle("./div[2]/h6");
		 		 var elAbrechNr =  labelAbrechnungsnummerInfo.FindAdapter<H6Tag>().Parent.Parent.FindSingle("./div[2]");
	  			 var elTransNr =  labelTransaktionsnummerInfo.FindAdapter<H6Tag>().Parent.Parent.FindSingle("./div[2]");
		 		 
		 		 // Validate Header
		 		  Report.Log(ReportLevel.Info, "Validation","Header details");
		 		  Validate.AttributeEqual(elGeraet,"InnerText",automatenNr);
		 		  Validate.AttributeEqual(elAbrechNr,"InnerText",abrechnungsNr);
		 		  Validate.AttributeEqual(elTransNr,"InnerText",transaktionsnummer);
		 		  Validate.AttributeEqual(elBarcode,"InnerText",medienkennung);
		 		 
		 		 
		 		  // Tabellen Objekte
		 		  
		 		  
					var CellProduktnummerInfo=repo.TicketingInside_DImasPlus.ContentPage.Papierrollenverwaltung.Ticketverfolgung.TicketverfolgungDetails.Tabelle.Zeile1.CellProduktnummerInfo;
					var CellProduktnameInfo2=repo.TicketingInside_DImasPlus.ContentPage.Papierrollenverwaltung.Ticketverfolgung.TicketverfolgungDetails.Tabelle.Zeile1.CellProduktnameInfo;
					var CellPreisstufeInfo=repo.TicketingInside_DImasPlus.ContentPage.Papierrollenverwaltung.Ticketverfolgung.TicketverfolgungDetails.Tabelle.Zeile1.CellPreisstufeInfo;					
					var CellZahlartInfo=repo.TicketingInside_DImasPlus.ContentPage.Papierrollenverwaltung.Ticketverfolgung.TicketverfolgungDetails.Tabelle.Zeile1.CellZahlartInfo;	
					var CellEinzahlungInfo=repo.TicketingInside_DImasPlus.ContentPage.Papierrollenverwaltung.Ticketverfolgung.TicketverfolgungDetails.Tabelle.Zeile1.CellEinzahlungInfo;
					var CellRueckerstattungInfo=repo.TicketingInside_DImasPlus.ContentPage.Papierrollenverwaltung.Ticketverfolgung.TicketverfolgungDetails.Tabelle.Zeile1.CellRueckerstattungInfo;
					var CellStoerbetragInfo=repo.TicketingInside_DImasPlus.ContentPage.Papierrollenverwaltung.Ticketverfolgung.TicketverfolgungDetails.Tabelle.Zeile1.CellStoerbetragInfo;
					
					
					// Validierung
					
		 		 // Validate Detail Tabelle
		 		  Report.Log(ReportLevel.Info, "Validation","Tabelle details");
		 
		 		  Validate.AttributeEqual(CellProduktnummerInfo,"InnerText",artikelnummer);
		 		  Validate.AttributeEqual(CellProduktnameInfo2,"InnerText",produktkennung);
		 		  Validate.AttributeEqual(CellPreisstufeInfo,"InnerText",preisstufenText);					
		 		  
		 		  // part 2
		 		  
		 		  Validate.AttributeEqual(CellZahlartInfo,"InnerText",zahlungsart);	 		  
		 		  Validate.AttributeContains(CellEinzahlungInfo,"InnerText",einzahlungsbetrag);				
		 		  Validate.AttributeContains(CellRueckerstattungInfo,"InnerText",rueckerstattungsbetragIst);
		 		  Validate.AttributeContains(CellStoerbetragInfo,"InnerText",stoerbetrag);						 		  
					
					
		 		  
		 		  // zurück 
		 		  var btnBackInfo=repo.TicketingInside_DImasPlus.ContentPage.Papierrollenverwaltung.Ticketverfolgung.TicketverfolgungDetails.btnBackInfo;
		 		  
		 		  btnBackInfo.FindAdapter<Button>().Click();
		 		  
		 		  
        	}
        	

        
	        }catch(Exception ex){	     
	            Report.Error("Fehler beim Verarbeiten der XML-Datei: " + ex.Message);
	        }
			
        }
        
        private string getZahlungsartString(string zahlungsart) {
        	string output = "" ;
        	if (zahlungsart.Equals("0")) return "Bar";
        	if (zahlungsart.Equals("2")) return "GiroCard";
        	
        	
        	
        	return output;
        }
        
        
        
        

//        public void TicketVerfolgungsPruefung(RepoItemInfo inputtagInfo, RepoItemInfo inputtagInfo1, RepoItemInfo ptagInfo, RepoItemInfo ptagInfo1, RepoItemInfo ptagInfo2, RepoItemInfo ptagInfo3, RepoItemInfo ptagInfo4, RepoItemInfo ptagInfo5, RepoItemInfo h6tagInfo, RepoItemInfo h6tagInfo1, RepoItemInfo h6tagInfo2, RepoItemInfo h6tagInfo3, RepoItemInfo ptagInfo6, RepoItemInfo ptagInfo7, RepoItemInfo ptagInfo8, RepoItemInfo tdtagInfo, RepoItemInfo ptagInfo9, RepoItemInfo ptagInfo10, RepoItemInfo ptagInfo11, RepoItemInfo buttonInfo)
//        {
//            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$AutomatenNr' with focus on 'inputtagInfo'.", inputtagInfo);
//            inputtagInfo.FindAdapter<InputTag>().PressKeys(AutomatenNr);
//            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '01000110005296' with focus on 'inputtagInfo1'.", inputtagInfo1);
//            inputtagInfo1.FindAdapter<InputTag>().PressKeys("01000110005296");
//            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ptagInfo'.", ptagInfo);
//            Validate.Exists(ptagInfo);
//            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ptagInfo1'.", ptagInfo1);
//            Validate.Exists(ptagInfo1);
//            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ptagInfo2'.", ptagInfo2);
//            Validate.Exists(ptagInfo2);
//            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ptagInfo3'.", ptagInfo3);
//            Validate.Exists(ptagInfo3);
//            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ptagInfo4'.", ptagInfo4);
//            Validate.Exists(ptagInfo4);
//            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ptagInfo5'.", ptagInfo5);
//            Validate.Exists(ptagInfo5);
//            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ptagInfo' at Center.", ptagInfo);
//            ptagInfo.FindAdapter<PTag>().Click();
//            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'h6tagInfo' at 66;20.", h6tagInfo);
//            h6tagInfo.FindAdapter<H6Tag>().Click("66;20");
//            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'h6tagInfo1' at 119;20.", h6tagInfo1);
//            h6tagInfo1.FindAdapter<H6Tag>().Click("119;20");
//            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'h6tagInfo2' at 130;14.", h6tagInfo2);
//            h6tagInfo2.FindAdapter<H6Tag>().Click("130;14");
//            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'h6tagInfo3' at 51;17.", h6tagInfo3);
//            h6tagInfo3.FindAdapter<H6Tag>().Click("51;17");
//            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ptagInfo6'.", ptagInfo6);
//            Validate.Exists(ptagInfo6);
//            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ptagInfo7'.", ptagInfo7);
//            Validate.Exists(ptagInfo7);
//            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ptagInfo8'.", ptagInfo8);
//            Validate.Exists(ptagInfo8);
//            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'tdtagInfo'.", tdtagInfo);
//            Validate.Exists(tdtagInfo);
//            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ptagInfo9'.", ptagInfo9);
//            Validate.Exists(ptagInfo9);
//            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ptagInfo10'.", ptagInfo10);
//            Validate.Exists(ptagInfo10);
//            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'ptagInfo11'.", ptagInfo11);
//            Validate.Exists(ptagInfo11);
//            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'buttonInfo' at 9;7.", buttonInfo);
//            buttonInfo.FindAdapter<Button>().Click("9;7");
//        }

    }
}
