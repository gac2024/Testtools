///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace Cottbus_3000CR.Modules.STANDARD.Monitoring.Monitoring
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Monitoring_pruefen recording.
    /// </summary>
    [TestModule("1a0cb1af-598e-476c-95fe-06a403757bde", ModuleType.Recording, 1)]
    public partial class Monitoring_pruefen : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::Cottbus_3000CR.HGS repository.
        /// </summary>
        public static global::Cottbus_3000CR.HGS repo = global::Cottbus_3000CR.HGS.Instance;

        static Monitoring_pruefen instance = new Monitoring_pruefen();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Monitoring_pruefen()
        {
            AutomatenNr = "999000";
            filterBetrieb = "In Betrieb";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Monitoring_pruefen Instance
        {
            get { return instance; }
        }

#region Variables

        string _AutomatenNr;

        /// <summary>
        /// Gets or sets the value of variable AutomatenNr.
        /// </summary>
        [TestVariable("9eafc6ae-ed0a-42f6-b1f5-15104e2ee0dc")]
        public string AutomatenNr
        {
            get { return _AutomatenNr; }
            set { _AutomatenNr = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable filterBetrieb.
        /// </summary>
        [TestVariable("d6258a07-8351-455f-9fe2-56462c948038")]
        public string filterBetrieb
        {
            get { return repo.filterBetrieb; }
            set { repo.filterBetrieb = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", global::Ranorex.Core.Constants.CodeGenVersion)]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 20;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TicketingInside_DImasPlus.Menue.Monitoring' at Center.", repo.TicketingInside_DImasPlus.Menue.MonitoringInfo, new RecordItemIndex(0));
            repo.TicketingInside_DImasPlus.Menue.Monitoring.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 300ms.", new RecordItemIndex(1));
            Delay.Duration(300, false);
            
            // set filter
            Report.Log(ReportLevel.Info, "Section", "set filter", new RecordItemIndex(2));
            
            UserCodeCollections.DPlusLibrary.Fill_textfilter(repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Monitoring.Tabelle.Filter.filterGeraetenummerInfo, AutomatenNr);
            Delay.Milliseconds(0);
            
            UserCodeCollections.DPlusLibrary.SetSelectFilter(repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Monitoring.Tabelle.Filter.filterBetriebInfo, filterBetrieb, repo.TicketingInside_DImasPlus.PopUps.SelfInfo);
            Delay.Milliseconds(0);
            
            // validate
            Report.Log(ReportLevel.Info, "Section", "validate", new RecordItemIndex(5));
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(6));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$AutomatenNr) on item 'TicketingInside_DImasPlus.ContentPage.Monitoring.Monitoring.Tabelle.Zeile1.cellGeraetenummer'.", repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Monitoring.Tabelle.Zeile1.cellGeraetenummerInfo, new RecordItemIndex(7));
            Validate.AttributeEqual(repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Monitoring.Tabelle.Zeile1.cellGeraetenummerInfo, "InnerText", AutomatenNr);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='OK') on item 'TicketingInside_DImasPlus.ContentPage.Monitoring.Monitoring.Tabelle.Zeile1.cellStatus'.", repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Monitoring.Tabelle.Zeile1.cellStatusInfo, new RecordItemIndex(8));
            Validate.AttributeEqual(repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Monitoring.Tabelle.Zeile1.cellStatusInfo, "InnerText", "OK");
            Delay.Milliseconds(0);
            
            // State display and back
            Report.Log(ReportLevel.Info, "Section", "State display and back", new RecordItemIndex(9));
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TicketingInside_DImasPlus.ContentPage.Monitoring.Monitoring.Tabelle.Zeile1.cellBetriieb' at Center.", repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Monitoring.Tabelle.Zeile1.cellBetriiebInfo, new RecordItemIndex(10));
            repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Monitoring.Tabelle.Zeile1.cellBetriieb.Click();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(11));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeContains (InnerText>$AutomatenNr) on item 'TicketingInside_DImasPlus.ContentPage.Monitoring.Monitoring.MonitoringDetails.overview.lblTitel'.", repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Monitoring.MonitoringDetails.overview.lblTitelInfo, new RecordItemIndex(12));
            Validate.AttributeContains(repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Monitoring.MonitoringDetails.overview.lblTitelInfo, "InnerText", AutomatenNr);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$AutomatenNr) on item 'TicketingInside_DImasPlus.ContentPage.Monitoring.Monitoring.MonitoringDetails.overview.lblSerienNr'.", repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Monitoring.MonitoringDetails.overview.lblSerienNrInfo, new RecordItemIndex(13));
            Validate.AttributeEqual(repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Monitoring.MonitoringDetails.overview.lblSerienNrInfo, "InnerText", AutomatenNr);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='Aktiv') on item 'TicketingInside_DImasPlus.ContentPage.Monitoring.Monitoring.MonitoringDetails.overview.lblAktiv'.", repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Monitoring.MonitoringDetails.overview.lblAktivInfo, new RecordItemIndex(14));
            Validate.AttributeEqual(repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Monitoring.MonitoringDetails.overview.lblAktivInfo, "InnerText", "Aktiv");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText='OK') on item 'TicketingInside_DImasPlus.ContentPage.Monitoring.Monitoring.MonitoringDetails.overview.lblStatus'.", repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Monitoring.MonitoringDetails.overview.lblStatusInfo, new RecordItemIndex(15));
            Validate.AttributeEqual(repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Monitoring.MonitoringDetails.overview.lblStatusInfo, "InnerText", "OK");
            Delay.Milliseconds(0);
            
            CheckTrafficOK();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'TicketingInside_DImasPlus.ContentPage.Monitoring.Monitoring.MonitoringDetails.btnBack' at Center.", repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Monitoring.MonitoringDetails.btnBackInfo, new RecordItemIndex(17));
            repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Monitoring.MonitoringDetails.btnBack.Click();
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
