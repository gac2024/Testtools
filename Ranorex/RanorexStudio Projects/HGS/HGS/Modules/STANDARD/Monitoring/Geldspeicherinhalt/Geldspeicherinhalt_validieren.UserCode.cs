///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Xml;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;
using Cottbus_3000CR.UserCodeCollections;

namespace Cottbus_3000CR.Modules.STANDARD.Monitoring.Geldspeicherinhalt
{
    public partial class Geldspeicherinhalt_validieren
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }
        
        public Dictionary<string, int>  map = new Dictionary<string, int>();
        
        
        public Dictionary<string, Dictionary<string,XmlNode>>  mapGeldlogistik = new Dictionary<string, Dictionary<string,XmlNode>>();
        
        
		public string AutomantenNr="";
        public string AbrechnungNr="";
        
        
        public void validateGeldspeicherOverview(RepoItemInfo tablerow)
        {
            string ProjectName=TestSuite.Current.Parameters["ProjectName"]; 
            string HGSmeldungsPfad = TestSuite.Current.Parameters["HGSmeldungsPfad"];       
    

	//		string ProjectName = "MASTER";
	//		string HGSmeldungsPfad ="C:\\Testtools\\HGS\\MELDUNGEN";  

            string xmlFilePath = HGSmeldungsPfad+"\\TRANSFER\\transfer_"+ProjectName+".xml";

            
            // Directories initialisieren und leeren.
            map.Clear();
            mapGeldlogistik.Clear();
            
            //prepare Map
            
            putIntoMap("MEK",0);
            putIntoMap("ZGS",0);
            putIntoMap("BNV",0);
            putIntoMap("BEK",0);
            putIntoMap("WGR",0);
            putIntoMap("BZK",0);
            putIntoMap("BWZ",0);            
            putIntoMap("BNW",0);
            
        	try
	        {
	        	 // Laden der XML-Datei
				 XmlDocument xmlDoc = new XmlDocument();	           
	        	 xmlDoc.Load(xmlFilePath);
	        	 
	        	 	        	 // get anzahltransaktionen
	        	XmlNode validNode = xmlDoc.SelectSingleNode("//geldlogistik");
				if (validNode == null)
					return;
		        
				
				 AutomantenNr=xmlDoc.SelectSingleNode("//automatenNr").InnerText;
				 AbrechnungNr=xmlDoc.SelectSingleNode("//abrechnungsnr").InnerText;
	        	 
	        	 
	        	 
				// hier koennen wir zusammenrechnen.  
				// dafür erstellen wir eine Map typ <String> <int>
				int AnzGL=xmlDoc.SelectNodes("//geldlogistik").Count;
			//	int AnzahlGeldtLogistik=int.Parse(AnzGL);
				
				for (int i=1;i<=AnzGL;i++){
					Report.Info("Geldlogistik Nummer ",i+"");
				
					string geldspeichertyp=xmlDoc.SelectSingleNode("//geldlogistik["+i+"]/geldspeichertyp").InnerText;
														
					string geldbetrag=xmlDoc.SelectSingleNode("//geldlogistik["+i+"]/geldbetrag").InnerText;				
					int  wert=int.Parse( geldbetrag.Split('#')[0] );
					string einschubNr = xmlDoc.SelectSingleNode("//geldlogistik["+i+"]/einschubNr").InnerText;	
					
					
					Report.Info("geldspeichertyp",geldspeichertyp);
					Report.Info("geldbetrag",wert+"");
					
					
					if (geldspeichertyp.Equals("BEK") && einschubNr.Equals("0")) geldspeichertyp="BZK";
					
					putIntoXmlMap(geldspeichertyp,einschubNr,xmlDoc.SelectSingleNode("//geldlogistik["+i+"]"));
										
					
					putIntoMap(geldspeichertyp,wert);

				}
			
			
		
				// zeile1 objekte   
	        	
	        	var cellGeraetenummerInfo=repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Geldspeicherinhalt.Tabelle.Zeile1.cellGeraetenummerInfo;      	
	        	
				var cellAbrechnungNrInfo=repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Geldspeicherinhalt.Tabelle.Zeile1.cellAbrechnungNrInfo;
				var cellSummeMEKInfo=repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Geldspeicherinhalt.Tabelle.Zeile1.cellSummeMEKInfo;				
				var cellSummeZGSInfo=repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Geldspeicherinhalt.Tabelle.Zeile1.cellSummeZGSInfo;      	
				var cellSummeBNVInfo=repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Geldspeicherinhalt.Tabelle.Zeile1.cellSummeBNVInfo;      	
				var cellSummeWGRInfo=repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Geldspeicherinhalt.Tabelle.Zeile1.cellSummeWGRInfo;      	
			
			
				// validate
				
				 Report.Log(ReportLevel.Info, "Validation","start check");
				 Validate.AttributeEqual(cellGeraetenummerInfo,"InnerText",AutomantenNr);
				 Validate.AttributeEqual(cellAbrechnungNrInfo,"InnerText",AbrechnungNr);
				 
				 
				 
				 
				 validatePart(cellSummeMEKInfo,"MEK");
			 	 validatePart(cellSummeZGSInfo,"ZGS");
				 validatePart(cellSummeBNVInfo,"BNV");
				 validatePart(cellSummeWGRInfo,"WGR");

			
			

	        }catch(Exception ex){	     
	            Report.Warn("Fehler beim Verarbeiten der XML-Datei: " + ex.Message);
	        }	 
        }
        


        public void validateGeldspeicherdetails()
        {
      		// details
           	
			var AbrechnungNrInfo=repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Geldspeicherinhalt.GeldspeicherinhaltDetails.overview.lblAbrechnungsnrInfo;
			var SummeMEKInfo=repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Geldspeicherinhalt.GeldspeicherinhaltDetails.overview.lblSummeMEKInfo;
			var SummeZGSInfo=repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Geldspeicherinhalt.GeldspeicherinhaltDetails.overview.lblSummeZGSInfo;
			var SummeBNVInfo=repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Geldspeicherinhalt.GeldspeicherinhaltDetails.overview.lblSummeBNVInfo;
			var SummeWGRInfo=repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Geldspeicherinhalt.GeldspeicherinhaltDetails.overview.lblSummeWGRInfo;

						
			// validate
			
			 Report.Log(ReportLevel.Info, "Validation details ","start check");
			 
			 validatePart(SummeMEKInfo,"MEK");
			 validatePart(SummeZGSInfo,"ZGS");
			 validatePart(SummeBNVInfo,"BNV");
			 validatePart(SummeWGRInfo,"WGR");
			 
			 
    	
			
    	  // tabelle
        	 TableTag typenTabelle=repo.TicketingInside_DImasPlus.ContentPage.Monitoring.Geldspeicherinhalt.GeldspeicherinhaltDetails.TypTabelle.SelfInfo.FindAdapter<TableTag>();
          	 TBodyTag body =typenTabelle.FindChild<TBodyTag>();
			 var mainrows=body.FindChildren<TrTag>();
        	  
        	 Report.Log(ReportLevel.Info, "Validation details ",""+mainrows.Count);
        	 for (int i=0;i<mainrows.Count;i++){
        	 	
        	 	string typ= mainrows[i].FindSingle<PTag>("./td[2]/p").GetAttributeValue<string>("innerText");
 
        	 	if (! mapGeldlogistik.ContainsKey(typ))  {
        	 		i++;
        	 		continue ;
        	 	}

				// welcher Typ liegt an ?
				
				Element gesamtbetrag= mainrows[i].FindSingle("./td[3]/p");       

				validatePart(gesamtbetrag,typ);
				
			//	Validate.AttributeContains( gesamtbetrag ,"InnerText", DPlusLibrary.PreisConverter(this.map[typ]+"#EUR") ); 	
				
				Dictionary<string,XmlNode>  LogistikMap = mapGeldlogistik[typ];
				
				// click auf td[2]
				
				mainrows[i].Click();
				
				
				var subtabellebody = mainrows[i+1].FindSingle<TBodyTag>(".//Tbody");
				var subrows=subtabellebody.FindChildren<TrTag>();
				
				int bestandsorteIdx=1;
				for (int j=0;j<subrows.Count;j++){
                    


					Element serienNrObj = subrows[j].FindSingle("./td[1]/p");
					Element SlotObj= subrows[j].FindSingle("./td[2]/p"); 	
					Element GeldWertObj= subrows[j].FindSingle("./td[3]/p"); 	
					Element AnzahlObj= subrows[j].FindSingle("./td[4]/p"); 	
					Element GesamtbetragObj= subrows[j].FindSingle("./td[5]/p"); 	
					

					
					if (! LogistikMap.ContainsKey(subrows[j].FindSingle<PTag>("./td[2]/p").InnerText)) continue;
					
					
					
					
					XmlNode GeldLogistikXML=LogistikMap[subrows[j].FindSingle<PTag>("./td[2]/p").InnerText];

					string geldspeicherId = GeldLogistikXML.SelectSingleNode("./geldspeicherId").InnerText;
				    string einschubNr = GeldLogistikXML.SelectSingleNode("./einschubNr").InnerText;				
				    string geldbetrag = GeldLogistikXML.SelectSingleNode("./geldbetrag").InnerText;
				    
				    
				    string anzahl="0";
				    string nennwert="EUR#0";
				    
				    if (GeldLogistikXML.SelectSingleNode("./bestandSorte_"+bestandsorteIdx+".anzahl") != null ) {
				    
						anzahl = GeldLogistikXML.SelectSingleNode("./bestandSorte_"+bestandsorteIdx+".anzahl").InnerText;
					    nennwert = GeldLogistikXML.SelectSingleNode("./bestandSorte_"+bestandsorteIdx+".nennwert").InnerText;

				    }
					
					
					
					
					string rowgesamt="EUR#"+Int32.Parse(nennwert.Split('#')[1])*Int32.Parse(anzahl);
					Validate.AttributeEqual( serienNrObj ,"InnerText", geldspeicherId );
					Validate.AttributeEqual( SlotObj ,"InnerText", einschubNr );
					Validate.AttributeEqual( AnzahlObj ,"InnerText", anzahl );	                                                					
					Validate.AttributeContains( GeldWertObj ,"InnerText", DPlusLibrary.PreisConverter(nennwert,true));
					
					
					Validate.AttributeContains( GesamtbetragObj ,"InnerText", DPlusLibrary.PreisConverter(rowgesamt,true) );
				
					
					
					if (GeldLogistikXML.SelectSingleNode("./bestandSorte_"+(bestandsorteIdx+1)+".anzahl") != null ) {
					    	bestandsorteIdx++;
					    }
					
					
					
				}
				//zuklappen
				mainrows[i].Click();
				i++;
				
    	 	 }
    	  
    	  
    	  
    	
        }
        
        
        
        
        // EXTRA-Funktionen
        
              public void validatePart(RepoItemInfo checkField,string geldspeichertyp){
        			validatePart( checkField.FindAdapter<PTag>() ,geldspeichertyp);
              }
        
        
        
        
              public void validatePart(Element checkField,string geldspeichertyp){
        					 
        		string field = ((string) checkField.GetAttributeValue("InnerText")).Trim(new Char[] { '€' } ).Trim();
				 						 
				 field=field.Substring(0,field.Length-3)+field.Substring(field.Length-2);
				// Report.Info("field="+field);
				 
				 int intfield=Int32.Parse(field);
			//	 Report.Info("intfield="+intfield);				 			
				 
				 if (intfield>=this.map[geldspeichertyp]) 
					 {
				 		Validate.IsTrue(true, geldspeichertyp+": "+ intfield + " (IST) >= " + this.map[geldspeichertyp]+" (SOLLmin) " );
					 }
				 else
					 {
					     Validate.IsTrue(false,geldspeichertyp+": "+ intfield + " (IST) >= " + this.map[geldspeichertyp]+" (SOLLmin) ");					 }
        	
        }
        
        
        public void putIntoMap(string geldspeichertyp, int geldbetrag){
        	
   //     	 Report.Info(geldspeichertyp+":"  + geldbetrag);
        	
        	
        	if (geldspeichertyp.Equals("BEK") || geldspeichertyp.Equals("BNW")|| geldspeichertyp.Equals("BWZ") || geldspeichertyp.Equals("BZK")) {
        		putIntoMap("BNV",geldbetrag);
        		
        	}

        	if (this.map.ContainsKey(geldspeichertyp) ){
        		// aufaddieren
        		int old = this.map[geldspeichertyp];
        		this.map.Remove(geldspeichertyp);
        		geldbetrag=old+geldbetrag;
        		
        	}
        	
        	map.Add(geldspeichertyp,geldbetrag);
        	
        }
        
        
        public void putIntoXmlMap(string geldspeichertyp,string einschubNr, XmlNode logiksticNode){
        	
        	
   //     	Report.Info(geldspeichertyp+":"  + einschubNr + " - "+logiksticNode.InnerXml);
        	
        	Dictionary<string,XmlNode> sublogisik = new Dictionary<string, XmlNode>();
        	
 	
        	if (this.mapGeldlogistik.ContainsKey(geldspeichertyp) ){       		
        		sublogisik = this.mapGeldlogistik[geldspeichertyp];        		
        		this.mapGeldlogistik.Remove(geldspeichertyp);
        	}
        	
        	sublogisik.Add(einschubNr,logiksticNode);       	
        	this.mapGeldlogistik.Add(geldspeichertyp,sublogisik);
        	
        	
        	
        }
        
        
        
        
        
        
        
        
        
        
        
        
        

    }
}
